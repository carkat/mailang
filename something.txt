- a comment
num   ← 5
float ← 5.5
A     ← 1 2 3
B     ← 2 3 4
D     ← a`A b`num c`6

emptyArr ← []

- also empty obj
emptyDict ← {}

multiLineArr ← 
    1 2 3
    4 5 6

nestedArr ←
    1 2 3 ; 1 2 3

multiDimArr ←
   (1 2 3) (1 2 3); (1 2 3) (1 2 ( 1 2 3))

multiLinDict ←
    a`A
    b`num
    c`6
    nestedDict`
      a`A
      b`num
      c`6

- iff also works as a function continuation 
truthTable ←
    true   ` T
    false  ` F
    isTrue `¬F
    isFalse`¬T
    and    ` T & T
    or     ` T ⋁ T
    iff    ` T & T ⟷ T
    xor    ` F & T ⨁ T

- functionName arg1 arg2 = body
add a b = a + b
sub a b = a - b
sum a b = Σ a b 
sums A  = Σ A

- anonymous function syntax
- name ← arg1 arg2...: body
fn ← a b: a + b


- the first | is read "if'
- the second | is read "else if'
conditionalFunction a b = 
    | true  → true
    | true  
    & true  → true
    | false   
    ⋁ true  → true
    | (
        longTrueVariable 
        & reallyLongTrueVariableName
      ) ← true
    | default
    : true    ← T
      false   ← F
      default ← F
      longTrueVariable ← true
      reallyLongTrueVariableName ← true


- collection operations
union        A B = A ⋃ B
disjoint     A B = A ⋂ B
includes     A B = A ⊂ B
includesOrEq A B = A ⊆ B
equalSet     A B = A = B

concat A B = A + B
remove A B = A - B


- if you need persistent variables in function scope
- : is read "where"
sums2 A = Σ B
    : B ← filter (n: (n % 2) = 0) A

sums3 A = Σ B
    : B ← filter (n i C: n < C(i + 1)) A




- ∈ is the iteration operator
- by default ∈ produces a few arguments
- (tuple of values) index ∈ Array
- { (the value to return) | interation, bool, bool, bool...}
- not wrapped in {} returns a single value
- identity set builder
setBuilder A = { a | a ∈ A }

- execution of a function on the right returns a if fn a
filter   fn  A = { a | a ∈ A , fn a }

- execution of a function on the left of | returns a mapped value
map fn  A = { fn a | a ∈ A }

- forall asserts that every value in A consides with some truth statement
- returns T or F
- written much like for x in A: x != 0
every fn A = ∀ a ∈ A, fn a

- ∃ is an array operator that when applied asserts a single value must be matched
- and that it a single value will be returned, stopping execution of the loop
includes val A = a | ∃ a ∈ A, a = val

- 𝚤 is the index of an array when ∈ is used
indexOf  val A =   𝚤 | ∃ a 𝚤 ∈ A , a = val
indexOfs fn  A = { 𝚤 |   a 𝚤 ∈ A , a = val }
locate   fn  A =   𝚤 | ∃ a 𝚤 ∈ A , fn a
loci     fn  A = { 𝚤 |   a 𝚤 ∈ A , fn a }

reduce   fn  A = Σ A fn
uniqueSet    A = { B + a | a ∈ A, ¬exists a B }
    : B ← []


solution x y = map (mapped κ) x
  : κ ← #x ρ y
    α ← 'abcdefghijklmnopqrstuvwxyz
    fn κ char 𝚤 = α[(k[𝚤] ια + char ια % #α) % #α] 

f a b c ← 
  | a < b      → a + b + c 
  | a > b < c  → a + b - c 
  | a < b
  & a = 2b > b + c → 3a + 2b

        