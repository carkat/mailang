̋̋̂
- assignment
a     ⟵ 1
b     ⟵ 2
A     ⟵ 1 2 3 4
B     ⟵ 1 3 4
true  ⟵ T
false ⟵ T
false ⟵ ¬T
true  ⟵ ¬F
and   ⟵ T ⋀ T
or    ⟵ T ⋁ T
neq   ⟵ T ≠ F
eq    ⟵ T = T
iff   ⟵ T ∧ T ⟷ T
xor   ⟵ T ∧ T ⨁ F 


fn a b ⟼
 | a + b > b
 & c + a > d ⟶ ¬a + b
 | a > b     ⟶  a + b
 | a < b     ⟶  a - b
 : c ⟵ a - ¬b
   d ⟵ a *  b

 
 

fn2 a b ⤇
 | a > b 
  & ( fn x y | x y ∈ ι 10 ) > 3
 ⋁ a + b = 3 
 ⟷ a + b - 1
 


- (set builder notation, returns a set)
range a     = ( x           | x ∈ ι a             )
range a b   = ( x + a       | x ∈ ι (b - a)       ) 
range a b c = ( (x * c) + a | x ∈ ι (⌊b - a⌋ / c)  ) 

map    fn A = ( fn a index A | a index ∈ A )
filter fn A = ( a | a index ∈ A, boolFn a index A)

noDups n index A = count (a | a ∈ A, a = A[index]) = 1
unique A = (a | a ∈ A, filter noDups A)

createSet A = notShared B A -> concat B
 : B = unique A


divby2 n = n // 2
range10  ⟵ ι10
evenNums ⟵ filter divby2 range10

- returns single values
indexAt val arr    = @ x ∈ arr | val =  x
exists  boolFn arr = ∃ x ∈ arr | boolFn x 
each    boolFn arr = ∀ x ∈ arr | boolFn x

reverseArr A = ¬A
containsNeq  ⟵ 1     ⊂ 1 2 3
containsOreq ⟵ 1 2 3 ⊆ 1 2 3
eq           ⟵ 1 2 3 = 1 2 3

min arr ⟵ ⌊ arr
max arr ⟵ ⌈ arr
sqrt n  ⟵ √n

A = 1 2 3
B = 1 3
concat    A B = A ⋃ B
notShared A B = A ⋂ B

count  ⟵ #A + #B
count2 ⟵ #A - #B



